<UserControl
	x:Class="StrixMusic.Controls.Settings.Ipfs.IpfsSettings"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:appModels="using:StrixMusic.AppModels"
	xmlns:behaviors="using:OwlCore.WinUI.Behaviors"
	xmlns:controls="using:Microsoft.Toolkit.Uwp.UI.Controls"
	xmlns:controls1="using:Microsoft.UI.Xaml.Controls"
	xmlns:core="using:Microsoft.Xaml.Interactions.Core"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
	xmlns:tkcontrols="using:CommunityToolkit.WinUI.Controls"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:ocext="using:OwlCore.Extensions"
	xmlns:ui="using:Microsoft.Toolkit.Uwp.UI"
	xmlns:win="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	x:Name="RootUserControl"
	mc:Ignorable="d">

	<StackPanel
		MaxWidth="750"
		Margin="20"
		Spacing="4">

		<interactivity:Interaction.Behaviors>
			<core:EventTriggerBehavior EventName="Loaded">
				<core:InvokeCommandAction Command="{x:Bind Ipfs.InitCommand}" />
			</core:EventTriggerBehavior>
		</interactivity:Interaction.Behaviors>

		<tkcontrols:SettingsExpander
			Description="A distributed web protocol, the p2p equivalent of HTTP."
			Header="What is this?"
			IsExpanded="{x:Bind InvertBool(Ipfs.Settings.Enabled), Mode=OneWay}">
			<tkcontrols:SettingsExpander.Items>
				<tkcontrols:SettingsCard
					Description="See the official basic concept docs."
					Header="The InterPlanetary File System"
					HeaderIcon="{ui:BitmapIcon Source=/Assets/Settings/ipfs.png}"
					IsClickEnabled="True">
					<interactivity:Interaction.Behaviors>
						<core:EventTriggerBehavior EventName="Click">
							<behaviors:OpenUriAction Source="https://ipfs.io/ipfs/QmWzA1FerU3ecYPk7i3W8qLJJxFE6KKQgwKqEBKW9ryC5B/concepts/what-is-ipfs/#decentralization" />
						</core:EventTriggerBehavior>
					</interactivity:Interaction.Behaviors>
				</tkcontrols:SettingsCard>

				<tkcontrols:SettingsCard Description="HTTP retrieves content using a location (an IP address), while IPFS uses a unique content identifier generated from the content itself (the CID)." HeaderIcon="{ui:FontIcon Glyph=&#xE928;}" />
				<tkcontrols:SettingsCard Description="Files can be accessed even if the original source is offline or censored, as long as someone has the data." HeaderIcon="{ui:FontIcon Glyph=&#xF785;}" />
				<tkcontrols:SettingsCard Description="IPFS enables real-time communication between devices, without the need for an internet connection or a server." HeaderIcon="{ui:FontIcon Glyph=&#xF22C;}" />
				<tkcontrols:SettingsCard Description="Like http, ipfs is a protocol with many implementations. This app uses Kubo, the original and most widely used IPFS implementation." HeaderIcon="{ui:FontIcon Glyph=&#xEEA3;}" />
			</tkcontrols:SettingsExpander.Items>
		</tkcontrols:SettingsExpander>

		<tkcontrols:SettingsCard
			Description="Review your communication preferences before enabling. "
			Header="IPFS is a public network. "
			HeaderIcon="{ui:FontIcon Glyph=&#xE946;}"
			Visibility="{x:Bind InvertBoolToVisibility(Ipfs.Settings.Enabled), Mode=OneWay}" />

		<TextBlock
			Margin="1,28,0,4"
			Style="{StaticResource BodyStrongTextBlockStyle}"
			Text="Basic settings" />

		<ProgressBar IsIndeterminate="True" Visibility="{x:Bind Ipfs.Settings.SaveCommand.IsRunning, Mode=OneWay}" />

		<tkcontrols:SettingsCard
			Description="Used to power features that require advanced communication between devices."
			Header="Enable IPFS (experimental)"
			IsEnabled="{x:Bind InvertBool(Ipfs.Settings.LoadCommand.IsRunning), FallbackValue=true, Mode=OneWay}"
			Visibility="{x:Bind InvertBoolToVisibility(Ipfs.Settings.Enabled), Mode=OneWay}">
			<ToggleSwitch IsEnabled="{x:Bind InvertBool(Ipfs.Settings.SaveCommand.IsRunning), FallbackValue=true, Mode=OneWay}" IsOn="{x:Bind Ipfs.Settings.Enabled, Mode=TwoWay}">
				<interactivity:Interaction.Behaviors>
					<core:EventTriggerBehavior EventName="Toggled">
						<core:InvokeCommandAction Command="{x:Bind Ipfs.Settings.SaveCommand, Mode=OneWay}" CommandParameter="{x:Null}" />
						<core:InvokeCommandAction Command="{x:Bind Ipfs.InitCommand, Mode=OneWay}" CommandParameter="{x:Null}" />
					</core:EventTriggerBehavior>
				</interactivity:Interaction.Behaviors>
			</ToggleSwitch>
		</tkcontrols:SettingsCard>

		<tkcontrols:SettingsExpander
			Description="Used to power features that require advanced communication between devices."
			Header="Enable IPFS (experimental)"
			IsEnabled="{x:Bind InvertBool(Ipfs.Settings.LoadCommand.IsRunning), FallbackValue=true, Mode=OneWay}"
			IsExpanded="True"
			Visibility="{x:Bind Ipfs.Settings.Enabled, Mode=OneWay}">
			<ToggleSwitch IsEnabled="{x:Bind InvertBool(Ipfs.Settings.SaveCommand.IsRunning), FallbackValue=true, Mode=OneWay}" IsOn="{x:Bind Ipfs.Settings.Enabled, Mode=TwoWay}">
				<interactivity:Interaction.Behaviors>
					<core:EventTriggerBehavior EventName="Toggled">
						<core:InvokeCommandAction Command="{x:Bind Ipfs.Settings.SaveCommand, Mode=OneWay}" CommandParameter="{x:Null}" />
						<core:InvokeCommandAction Command="{x:Bind Ipfs.InitCommand, Mode=OneWay}" CommandParameter="{x:Null}" />
					</core:EventTriggerBehavior>
				</interactivity:Interaction.Behaviors>
			</ToggleSwitch>

			<tkcontrols:SettingsExpander.Items>
				<tkcontrols:SettingsCard Header="{x:Bind Ipfs.InitStatus, Mode=OneWay}" IsEnabled="{x:Bind InvertBool(Ipfs.Settings.LoadCommand.IsRunning), FallbackValue=false, Mode=OneWay}">

					<Grid>
						<!--  If IPFS is not loaded  -->
						<Border Visibility="{x:Bind Ipfs.Settings.Enabled, FallbackValue=Collapsed, Mode=OneWay}">
							<Border Visibility="{x:Bind InvertBoolToVisibility(Ipfs.IsInitialized), FallbackValue=Collapsed, Mode=OneWay}">
								<Border Visibility="{x:Bind InvertBoolToVisibility(Ipfs.InitCommand.IsRunning), FallbackValue=Collapsed, Mode=OneWay}">
									<controls:WrapPanel HorizontalSpacing="10" VerticalSpacing="10">
										<ProgressRing IsActive="{x:Bind Ipfs.InitCommand.IsRunning, FallbackValue=false, Mode=OneWay}" Visibility="{x:Bind Ipfs.InitCommand.IsRunning, FallbackValue=false, Mode=OneWay}" />

										<Button Command="{x:Bind Ipfs.InitCommand, Mode=OneWay}" Content="Start" />

										<Ellipse
											Width="25"
											Height="25"
											Fill="{ThemeResource SystemControlDisabledBaseLowBrush}" />
									</controls:WrapPanel>
								</Border>
							</Border>
						</Border>

						<!--  If IPFS is running and ready to use  -->
						<Border Visibility="{x:Bind Ipfs.Settings.Enabled, FallbackValue=Collapsed, Mode=OneWay}">
							<Border Visibility="{x:Bind Ipfs.IsInitialized, FallbackValue=Collapsed, Mode=OneWay}">
								<Border Visibility="{x:Bind InvertBoolToVisibility(Ipfs.InitCommand.IsRunning), FallbackValue=Collapsed, Mode=OneWay}">
									<controls:WrapPanel
										HorizontalSpacing="10"
										VerticalSpacing="10"
										Visibility="{x:Bind Ipfs.IsInitialized, FallbackValue=false, Mode=OneWay}">

										<Button
											Command="{x:Bind Ipfs.StopCommand, Mode=OneWay}"
											Content="Stop"
											Visibility="{x:Bind InvertBoolToVisibility(Ipfs.StopCommand.IsRunning), FallbackValue=Collapsed, Mode=OneWay}" />

										<Button
											Command="{x:Bind Ipfs.StopCancelCommand, Mode=OneWay}"
											Content="Cancel"
											IsEnabled="{x:Bind InvertBool(Ipfs.StopCommand.IsRunning), FallbackValue=false, Mode=OneWay}"
											Visibility="{x:Bind Ipfs.StopCommand.IsRunning, FallbackValue=Collapsed, Mode=OneWay}" />

										<Ellipse
											Width="25"
											Height="25"
											Fill="MediumSeaGreen" />

										<ProgressRing IsActive="{x:Bind Ipfs.StopCommand.IsRunning, FallbackValue=false, Mode=OneWay}" Visibility="{x:Bind Ipfs.StopCommand.IsRunning, FallbackValue=false, Mode=OneWay}" />
									</controls:WrapPanel>
								</Border>
							</Border>
						</Border>

						<!--  If IPFS is initializing  -->
						<controls:WrapPanel
							HorizontalSpacing="10"
							VerticalSpacing="10"
							Visibility="{x:Bind Ipfs.InitCommand.IsRunning, FallbackValue=false, Mode=OneWay}">

							<ProgressRing IsActive="{x:Bind Ipfs.InitCommand.IsRunning, FallbackValue=false, Mode=OneWay}" Visibility="{x:Bind Ipfs.InitCommand.IsRunning, FallbackValue=false, Mode=OneWay}" />

							<Button
								Command="{x:Bind Ipfs.InitCancelCommand, Mode=OneWay}"
								Content="Stop"
								IsEnabled="{x:Bind Ipfs.InitCommand.IsRunning, FallbackValue=false, Mode=OneWay}" />

							<Ellipse
								Width="25"
								Height="25"
								Fill="DarkOrange" />
						</controls:WrapPanel>
					</Grid>
				</tkcontrols:SettingsCard>
			</tkcontrols:SettingsExpander.Items>
		</tkcontrols:SettingsExpander>

		<tkcontrols:SettingsCard
			Description="The port used to communicate with IPFS. If not already running on this port, we'll download Kubo and bootstrap it on this port for you."
			Header="API Port"
			HeaderIcon="{ui:FontIcon Glyph=&#xEDA3;}"
			IsEnabled="{x:Bind InvertBool(Ipfs.IsInitialized), FallbackValue=false, Mode=OneWay}">
			<controls1:NumberBox IsEnabled="{x:Bind InvertBool(Ipfs.InitCommand.IsRunning), FallbackValue=false, Mode=OneWay}" Value="{x:Bind Ipfs.Settings.NodeApiPort, Mode=TwoWay}">
				<interactivity:Interaction.Behaviors>
					<core:EventTriggerBehavior EventName="LostFocus">
						<core:InvokeCommandAction Command="{x:Bind Ipfs.Settings.SaveCommand, Mode=OneWay}" CommandParameter="{x:Null}" />
					</core:EventTriggerBehavior>
				</interactivity:Interaction.Behaviors>
			</controls1:NumberBox>
		</tkcontrols:SettingsCard>

		<tkcontrols:SettingsCard
			Description="The port to use for the gateway. If you have a local node already running and don't want to use it, make sure this is different."
			Header="Gateway Port"
			HeaderIcon="{ui:FontIcon Glyph=&#xEDA3;}"
			IsEnabled="{x:Bind InvertBool(Ipfs.IsInitialized), FallbackValue=false, Mode=OneWay}">
			<controls1:NumberBox IsEnabled="{x:Bind InvertBool(Ipfs.InitCommand.IsRunning), FallbackValue=false, Mode=OneWay}" Value="{x:Bind Ipfs.Settings.NodeGatewayPort, Mode=TwoWay}">
				<interactivity:Interaction.Behaviors>
					<core:EventTriggerBehavior EventName="LostFocus">
						<core:InvokeCommandAction Command="{x:Bind Ipfs.Settings.SaveCommand, Mode=OneWay}" CommandParameter="{x:Null}" />
					</core:EventTriggerBehavior>
				</interactivity:Interaction.Behaviors>
			</controls1:NumberBox>
		</tkcontrols:SettingsCard>

		<tkcontrols:SettingsCard
			Description="{x:Bind RoutingModeToDescription(Ipfs.Settings.BootstrapNodeDhtRouting), Mode=OneWay}"
			Header="Routing mode (Bootstrap only)"
			HeaderIcon="{ui:FontIcon Glyph=&#xE968;}"
			IsEnabled="{x:Bind InvertBool(Ipfs.IsInitialized), FallbackValue=false, Mode=OneWay}">
			<ComboBox win:ItemsSource="{ui:EnumValues Type={ocext:Type Fullname='OwlCore.Kubo.DhtRoutingMode, OwlCore.Kubo'}}" win:SelectedItem="{x:Bind Ipfs.Settings.BootstrapNodeDhtRouting, Mode=TwoWay}" />
		</tkcontrols:SettingsCard>

		<tkcontrols:SettingsCard
			Description="Enable or disable discovery of peers on your local network."
			Header="Local network discovery (Bootstrap only)"
			HeaderIcon="{ui:FontIcon Glyph=&#xE968;}"
			IsEnabled="{x:Bind InvertBool(Ipfs.IsInitialized), FallbackValue=false, Mode=OneWay}">
			<ToggleSwitch IsEnabled="{x:Bind InvertBool(Ipfs.Settings.SaveCommand.IsRunning), FallbackValue=true, Mode=OneWay}" IsOn="{x:Bind Ipfs.Settings.BootstrapNodeEnableLocalDiscovery, Mode=TwoWay}">
				<interactivity:Interaction.Behaviors>
					<core:EventTriggerBehavior EventName="Toggled">
						<core:InvokeCommandAction Command="{x:Bind Ipfs.Settings.SaveCommand, Mode=OneWay}" CommandParameter="{x:Null}" />
					</core:EventTriggerBehavior>
				</interactivity:Interaction.Behaviors>
			</ToggleSwitch>
		</tkcontrols:SettingsCard>

		<TextBlock
			Margin="1,28,0,4"
			Style="{StaticResource BodyStrongTextBlockStyle}"
			Text="Installation"
			Visibility="{x:Bind Ipfs.IsInitialized, Mode=OneWay}" />

		<tkcontrols:SettingsCard
			Description="{x:Bind IpnsPathToProtocolUrl(Ipfs.Settings.ReleaseIpns), FallbackValue=?, Mode=OneWay}"
			Header="Installed from"
			HeaderIcon="{ui:FontIcon Glyph=&#xF133;}"
			IsEnabled="{x:Bind Ipfs.IsInitialized, FallbackValue=false, Mode=OneWay}"
			Visibility="{x:Bind Ipfs.IsInitialized, Mode=OneWay}">
			<Button Content="View latest" Visibility="{x:Bind IsNotNullOrWhiteSpaceToVisibility(Ipfs.Settings.ReleaseIpns), Mode=OneWay, FallbackValue=Collapsed}">
				<interactivity:Interaction.Behaviors>
					<core:EventTriggerBehavior EventName="Click">
						<behaviors:OpenUriAction Source="{x:Bind IpnsPathToProtocolUrl(Ipfs.Settings.ReleaseIpns), Mode=OneWay, FallbackValue={x:Null}}" />
					</core:EventTriggerBehavior>
				</interactivity:Interaction.Behaviors>
			</Button>
		</tkcontrols:SettingsCard>

		<tkcontrols:SettingsCard
			Description="{x:Bind IpfsPathToProtocolUrl(Ipfs.Settings.ReleaseIpnsResolved), FallbackValue=?, Mode=OneWay}"
			Header="Last known release CID"
			HeaderIcon="{ui:FontIcon Glyph=&#xE928;}"
			IsEnabled="{x:Bind Ipfs.IsInitialized, FallbackValue=false, Mode=OneWay}"
			Visibility="{x:Bind Ipfs.IsInitialized, Mode=OneWay}">
			<Button Content="View snapshot" Visibility="{x:Bind IsNotNullOrWhiteSpaceToVisibility(Ipfs.Settings.ReleaseIpnsResolved), Mode=OneWay, FallbackValue=Collapsed}">
				<interactivity:Interaction.Behaviors>
					<core:EventTriggerBehavior EventName="Click">
						<behaviors:OpenUriAction Source="{x:Bind IpfsPathToProtocolUrl(Ipfs.Settings.ReleaseIpnsResolved), Mode=OneWay, FallbackValue={x:Null}}" />
					</core:EventTriggerBehavior>
				</interactivity:Interaction.Behaviors>
			</Button>
		</tkcontrols:SettingsCard>

		<tkcontrols:SettingsCard
			Description="Coming soon: sideload and update Strix Music over IPFS."
			Header="App Updates"
			HeaderIcon="{ui:FontIcon Glyph=&#xE835;}"
			IsEnabled="False"
			Visibility="{x:Bind Ipfs.IsInitialized, Mode=OneWay}">
			<Button Content="Check for updates" />
		</tkcontrols:SettingsCard>

		<TextBlock
			Margin="1,28,0,4"
			Style="{StaticResource BodyStrongTextBlockStyle}"
			Text="Release content"
			Visibility="{x:Bind Ipfs.IsInitialized, Mode=OneWay}" />

		<tkcontrols:SettingsExpander
			Description="Preload and pin content from the installation source on your local IPFS node for quick and offline access. Refreshed on app startup."
			Header="Save release content"
			HeaderIcon="{ui:FontIcon Glyph=&#xF785;}"
			IsEnabled="{x:Bind Ipfs.IsInitialized, FallbackValue=false, Mode=OneWay}"
			IsExpanded="True"
			ItemsSource="{x:Bind Ipfs.AppReleaseContentLoader.Bundles, Mode=OneWay}"
			Visibility="{x:Bind Ipfs.IsInitialized, Mode=OneWay}">
			<tkcontrols:SettingsExpander.ItemTemplate>
				<DataTemplate x:DataType="appModels:AppReleaseContentBundlePreloadHandler">
					<tkcontrols:SettingsCard Description="{x:Bind ReleaseContentBundle.Description, FallbackValue='No description'}" Header="{x:Bind ReleaseContentBundle.DisplayName, FallbackValue='No display name'}">
						<controls:WrapPanel HorizontalSpacing="8" VerticalSpacing="8">
							<ProgressRing IsActive="{x:Bind PinCommand.IsRunning, Mode=OneWay}" />
							<ProgressRing IsActive="{x:Bind UnpinCommand.IsRunning, Mode=OneWay}" />

							<ToggleSwitch x:Name="PreloadToggleSwitch" IsOn="{Binding IsPinned, Mode=TwoWay}" />
						</controls:WrapPanel>
					</tkcontrols:SettingsCard>
				</DataTemplate>
			</tkcontrols:SettingsExpander.ItemTemplate>
		</tkcontrols:SettingsExpander>

		<TextBlock
			Margin="1,28,0,4"
			Style="{StaticResource BodyStrongTextBlockStyle}"
			Text="Additional features"
			Visibility="{x:Bind Ipfs.IsInitialized, Mode=OneWay}" />

		<tkcontrols:SettingsCard
			Description="The number of users who have enabled IPFS in the Strix Music app and are reachable by your node."
			Header="Users online"
			HeaderIcon="{ui:FontIcon Glyph=&#xEB44;}"
			IsEnabled="{x:Bind Ipfs.IsInitialized, FallbackValue=false, Mode=OneWay}"
			Visibility="{x:Bind Ipfs.IsInitialized, Mode=OneWay}">
			<TextBlock>
				<Run Text="{x:Bind Ipfs.Everyone.ConnectedPeers.Count, FallbackValue=?, Mode=OneWay}" />
			</TextBlock>
		</tkcontrols:SettingsCard>

		<tkcontrols:SettingsCard
			Description="Content on your local node that isn't pinned or stored in MFS will be cleaned up."
			Header="Garbage collection"
			HeaderIcon="{ui:FontIcon Glyph=&#xE107;}"
			IsEnabled="{x:Bind Ipfs.IsInitialized, FallbackValue=false, Mode=OneWay}"
			Visibility="{x:Bind Ipfs.IsInitialized, Mode=OneWay}">
			<Grid>
				<ProgressRing IsActive="{x:Bind Ipfs.ExecuteGarbageCollectionCommand.IsRunning, Mode=OneWay}" />

				<Button
					Command="{x:Bind Ipfs.ExecuteGarbageCollectionCommand, Mode=OneWay}"
					Content="Run GC"
					Visibility="{x:Bind InvertBoolToVisibility(Ipfs.ExecuteGarbageCollectionCommand.IsRunning), Mode=OneWay}" />

				<Button
					Command="{x:Bind Ipfs.ExecuteGarbageCollectionCancelCommand, Mode=OneWay}"
					Content="Cancel"
					Visibility="{x:Bind Ipfs.ExecuteGarbageCollectionCommand.IsRunning, Mode=OneWay}" />
			</Grid>
		</tkcontrols:SettingsCard>

		<tkcontrols:SettingsCard
			Description="Requires app restart. See how many people are listening to the same track, album, artist, playlist, etc., as you. Allows others to see when something is playing, paused, loading, or failing to load."
			Header="Enable global playback state counters"
			HeaderIcon="{ui:FontIcon Glyph=&#xEBDA;}"
			IsEnabled="{x:Bind InvertBool(Ipfs.Settings.LoadCommand.IsRunning), FallbackValue=true, Mode=OneWay}"
			Visibility="Collapsed">
			<ToggleSwitch IsEnabled="{x:Bind InvertBool(Ipfs.Settings.SaveCommand.IsRunning), FallbackValue=true, Mode=OneWay}" IsOn="{x:Bind Ipfs.Settings.GlobalPlaybackStateCountPluginEnabled, Mode=TwoWay}">
				<interactivity:Interaction.Behaviors>
					<core:EventTriggerBehavior EventName="Toggled">
						<core:InvokeCommandAction Command="{x:Bind Ipfs.Settings.SaveCommand, Mode=OneWay}" CommandParameter="{x:Null}" />
					</core:EventTriggerBehavior>
				</interactivity:Interaction.Behaviors>
			</ToggleSwitch>
		</tkcontrols:SettingsCard>

	</StackPanel>
</UserControl>
