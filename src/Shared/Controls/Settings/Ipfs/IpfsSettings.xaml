<UserControl
	x:Class="StrixMusic.Controls.Settings.Ipfs.IpfsSettings"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:appModels="using:StrixMusic.AppModels"
	xmlns:behaviors="using:OwlCore.WinUI.Behaviors"
	xmlns:controls="using:Microsoft.Toolkit.Uwp.UI.Controls"
	xmlns:controls1="using:Microsoft.UI.Xaml.Controls"
	xmlns:core="using:Microsoft.Xaml.Interactions.Core"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
	xmlns:labs="using:CommunityToolkit.Labs.WinUI"
	xmlns:local="using:StrixMusic.Controls"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:sys="using:System"
	xmlns:ui="using:Microsoft.Toolkit.Uwp.UI"
	mc:Ignorable="d">

	<StackPanel
		MaxWidth="750"
		Margin="20"
		Spacing="4">

		<interactivity:Interaction.Behaviors>
			<core:EventTriggerBehavior EventName="Loaded">
				<core:InvokeCommandAction Command="{x:Bind Ipfs.InitCommand}" />
			</core:EventTriggerBehavior>
		</interactivity:Interaction.Behaviors>

		<TextBlock
			Margin="1,28,0,4"
			Style="{StaticResource BodyStrongTextBlockStyle}"
			Text="Basic settings" />

		<labs:SettingsCard
			Description="For more advanced features, this app uses IPFS instead of HTTP. Your devices will communicate with each other directly, without an external server."
			Header="Enable IPFS"
			HeaderIcon="{ui:BitmapIcon Source=/Assets/Settings/ipfs.png}"
			IsEnabled="{x:Bind InvertBool(Ipfs.Settings.LoadCommand.IsRunning), FallbackValue=true, Mode=OneWay}"
			Visibility="{x:Bind InvertBoolToVisibility(Ipfs.Settings.Enabled), Mode=OneWay}">
			<ToggleSwitch IsEnabled="{x:Bind InvertBool(Ipfs.Settings.SaveCommand.IsRunning), FallbackValue=true, Mode=OneWay}" IsOn="{x:Bind Ipfs.Settings.Enabled, Mode=TwoWay}">
				<interactivity:Interaction.Behaviors>
					<core:EventTriggerBehavior EventName="Toggled">
						<core:InvokeCommandAction Command="{x:Bind Ipfs.Settings.SaveCommand, Mode=OneWay}" CommandParameter="{x:Null}" />
					</core:EventTriggerBehavior>
					<core:EventTriggerBehavior EventName="Toggled">
						<core:InvokeCommandAction Command="{x:Bind Ipfs.InitCommand, Mode=OneWay}" CommandParameter="{x:Null}" />
					</core:EventTriggerBehavior>
				</interactivity:Interaction.Behaviors>
			</ToggleSwitch>
		</labs:SettingsCard>

		<labs:SettingsExpander
			Description="For more advanced features, this app uses IPFS instead of HTTP. Your devices will communicate with each other directly, without an external server."
			Header="Enable IPFS"
			HeaderIcon="{ui:BitmapIcon Source=/Assets/Settings/ipfs.png}"
			IsEnabled="{x:Bind InvertBool(Ipfs.Settings.LoadCommand.IsRunning), FallbackValue=true, Mode=OneWay}"
			IsExpanded="True"
			Visibility="{x:Bind Ipfs.Settings.Enabled, Mode=OneWay}">
			<ToggleSwitch IsEnabled="{x:Bind InvertBool(Ipfs.Settings.SaveCommand.IsRunning), FallbackValue=true, Mode=OneWay}" IsOn="{x:Bind Ipfs.Settings.Enabled, Mode=TwoWay}">
				<interactivity:Interaction.Behaviors>
					<core:EventTriggerBehavior EventName="Toggled">
						<core:InvokeCommandAction Command="{x:Bind Ipfs.Settings.SaveCommand, Mode=OneWay}" CommandParameter="{x:Null}" />
					</core:EventTriggerBehavior>
					<core:EventTriggerBehavior EventName="Toggled">
						<core:InvokeCommandAction Command="{x:Bind Ipfs.InitCommand, Mode=OneWay}" CommandParameter="{x:Null}" />
					</core:EventTriggerBehavior>
				</interactivity:Interaction.Behaviors>
			</ToggleSwitch>

			<labs:SettingsExpander.Items>
				<labs:SettingsCard
					x:Name="IpfsStatusCard"
					Description="{x:Bind Ipfs.InitStatus, Mode=OneWay}"
					IsEnabled="{x:Bind InvertBool(Ipfs.Settings.LoadCommand.IsRunning), FallbackValue=false, Mode=OneWay}">

					<Grid>
						<!--  If IPFS is not loaded  -->
						<Border Visibility="{x:Bind Ipfs.Settings.Enabled, FallbackValue=Collapsed, Mode=OneWay}">
							<Border Visibility="{x:Bind InvertBoolToVisibility(Ipfs.IsInitialized), FallbackValue=Collapsed, Mode=OneWay}">
								<Border Visibility="{x:Bind InvertBoolToVisibility(Ipfs.InitCommand.IsRunning), FallbackValue=Collapsed, Mode=OneWay}">
									<controls:WrapPanel HorizontalSpacing="10" VerticalSpacing="10">
										<ProgressRing IsActive="{x:Bind Ipfs.InitCommand.IsRunning, FallbackValue=false, Mode=OneWay}" Visibility="{x:Bind Ipfs.InitCommand.IsRunning, FallbackValue=false, Mode=OneWay}" />

										<Button Command="{x:Bind Ipfs.InitCommand, Mode=OneWay}" Content="Start" />

										<Ellipse
											Width="25"
											Height="25"
											Fill="{ThemeResource SystemControlDisabledBaseLowBrush}" />
									</controls:WrapPanel>
								</Border>
							</Border>
						</Border>

						<!--  If IPFS is running and ready to use  -->
						<Border Visibility="{x:Bind Ipfs.Settings.Enabled, FallbackValue=Collapsed, Mode=OneWay}">
							<Border Visibility="{x:Bind Ipfs.IsInitialized, FallbackValue=Collapsed, Mode=OneWay}">
								<Border Visibility="{x:Bind InvertBoolToVisibility(Ipfs.InitCommand.IsRunning), FallbackValue=Collapsed, Mode=OneWay}">
									<controls:WrapPanel
										HorizontalSpacing="10"
										VerticalSpacing="10"
										Visibility="{x:Bind Ipfs.IsInitialized, FallbackValue=false, Mode=OneWay}">

										<Button
											Command="{x:Bind Ipfs.StopCommand, Mode=OneWay}"
											Content="Stop"
											Visibility="{x:Bind InvertBoolToVisibility(Ipfs.StopCommand.IsRunning), FallbackValue=Collapsed, Mode=OneWay}" />

										<Button
											Command="{x:Bind Ipfs.StopCancelCommand, Mode=OneWay}"
											Content="Cancel"
											IsEnabled="{x:Bind InvertBool(Ipfs.StopCommand.IsRunning), FallbackValue=false, Mode=OneWay}"
											Visibility="{x:Bind Ipfs.StopCommand.IsRunning, FallbackValue=Collapsed, Mode=OneWay}" />

										<Ellipse
											Width="25"
											Height="25"
											Fill="MediumSeaGreen" />

										<ProgressRing IsActive="{x:Bind Ipfs.StopCommand.IsRunning, FallbackValue=false, Mode=OneWay}" Visibility="{x:Bind Ipfs.StopCommand.IsRunning, FallbackValue=false, Mode=OneWay}" />
									</controls:WrapPanel>
								</Border>
							</Border>
						</Border>

						<!--  If IPFS is initializing  -->
						<controls:WrapPanel
							HorizontalSpacing="10"
							VerticalSpacing="10"
							Visibility="{x:Bind Ipfs.InitCommand.IsRunning, FallbackValue=false, Mode=OneWay}">

							<ProgressRing IsActive="{x:Bind Ipfs.InitCommand.IsRunning, FallbackValue=false, Mode=OneWay}" Visibility="{x:Bind Ipfs.InitCommand.IsRunning, FallbackValue=false, Mode=OneWay}" />

							<Button
								Command="{x:Bind Ipfs.InitCancelCommand, Mode=OneWay}"
								Content="Stop"
								IsEnabled="{x:Bind Ipfs.InitCommand.IsRunning, FallbackValue=false, Mode=OneWay}" />

							<Ellipse
								Width="25"
								Height="25"
								Fill="DarkOrange" />
						</controls:WrapPanel>
					</Grid>
				</labs:SettingsCard>
			</labs:SettingsExpander.Items>
		</labs:SettingsExpander>

		<labs:SettingsCard
			Description="If a node is not already running on this port, we'll download Kubo and bootstrap it on this port for you."
			Header="Kubo RPC Port"
			HeaderIcon="{ui:FontIcon Glyph=&#xEDA3;}"
			IsEnabled="{x:Bind InvertBool(Ipfs.Settings.LoadCommand.IsRunning), FallbackValue=false, Mode=OneWay}">
			<controls1:NumberBox IsEnabled="{x:Bind InvertBool(Ipfs.Settings.SaveCommand.IsRunning), FallbackValue=false, Mode=OneWay}" Value="{x:Bind Ipfs.Settings.NodeApiPort, Mode=TwoWay}">
				<interactivity:Interaction.Behaviors>
					<core:EventTriggerBehavior EventName="LostFocus">
						<core:InvokeCommandAction Command="{x:Bind Ipfs.Settings.SaveCommand, Mode=OneWay}" CommandParameter="{x:Null}" />
					</core:EventTriggerBehavior>
				</interactivity:Interaction.Behaviors>
			</controls1:NumberBox>
		</labs:SettingsCard>

		<TextBlock
			Margin="1,28,0,4"
			Style="{StaticResource BodyStrongTextBlockStyle}"
			Text="Release settings" />

		<labs:SettingsCard
			Description="In the future, changing this option will reinstall the app using the provided release source"
			Header="Release source"
			IsEnabled="{x:Bind Ipfs.IsInitialized, FallbackValue=false, Mode=OneWay}">
			<TextBox IsEnabled="False" Text="{x:Bind Ipfs.Settings.ReleaseIpns, Mode=TwoWay}" />
		</labs:SettingsCard>

		<labs:SettingsExpander
			x:Name="AppReleaseContentPreload"
			Description="Preloaded files load instantly on this device, are always available for new devices on your local network, and speed up content retrieval for new users on the internet"
			Header="Pin &amp; preload release content"
			IsEnabled="{x:Bind Ipfs.IsInitialized, FallbackValue=false, Mode=OneWay}"
			ItemsSource="{x:Bind Ipfs.AppReleaseContentLoader.Bundles, Mode=OneWay}">
			<labs:SettingsExpander.ItemTemplate>
				<DataTemplate x:DataType="appModels:AppReleaseContentBundlePreloadHandler">
					<labs:SettingsCard Description="{x:Bind ReleaseContentBundle.Description}" Header="{x:Bind ReleaseContentBundle.DisplayName}">
						<StackPanel Spacing="8">
							<ProgressRing IsActive="{x:Bind PreloadCommand.IsRunning, Mode=OneWay}" />

							<ToggleSwitch x:Name="PreloadToggleSwitch" IsOn="{x:Bind IsPreloaded, Mode=OneWay}">
								<interactivity:Interaction.Behaviors>
									<core:DataTriggerBehavior
										Binding="{Binding IsOn, ElementName=PreloadToggleSwitch}"
										ComparisonCondition="Equal"
										Value="true">
										<core:InvokeCommandAction Command="{x:Bind PreloadCommand, Mode=OneWay}" CommandParameter="{x:Null}" />
									</core:DataTriggerBehavior>

									<core:DataTriggerBehavior
										Binding="{Binding IsOn, ElementName=PreloadToggleSwitch}"
										ComparisonCondition="Equal"
										Value="false">
										<core:InvokeCommandAction Command="{x:Bind PreloadCancelCommand, Mode=OneWay}" CommandParameter="{x:Null}" />
									</core:DataTriggerBehavior>
								</interactivity:Interaction.Behaviors>
							</ToggleSwitch>
						</StackPanel>
					</labs:SettingsCard>
				</DataTemplate>
			</labs:SettingsExpander.ItemTemplate>
		</labs:SettingsExpander>

		<TextBlock
			Margin="1,28,0,4"
			Style="{StaticResource BodyStrongTextBlockStyle}"
			Text="Additional features" />

		<labs:SettingsCard
			Description="Content on your local node that isn't pinned or stored in MFS will be cleaned up."
			Header="Garbage collection"
			HeaderIcon="{ui:FontIcon Glyph=&#xE107;}"
			IsEnabled="{x:Bind Ipfs.IsInitialized, FallbackValue=false, Mode=OneWay}">
			<StackPanel>
				<ProgressRing IsActive="{x:Bind Ipfs.ExecuteGarbageCollectionCommand.IsRunning, Mode=OneWay}" />

				<Button
					Command="{x:Bind Ipfs.ExecuteGarbageCollectionCommand, Mode=OneWay}"
					Content="Run GC"
					Visibility="{x:Bind InvertBoolToVisibility(Ipfs.ExecuteGarbageCollectionCommand.IsRunning), Mode=OneWay}" />

				<Button
					Command="{x:Bind Ipfs.ExecuteGarbageCollectionCancelCommand, Mode=OneWay}"
					Content="Cancel"
					Visibility="{x:Bind Ipfs.ExecuteGarbageCollectionCommand.IsRunning, Mode=OneWay}" />
			</StackPanel>
		</labs:SettingsCard>

		<labs:SettingsCard
			Description="The number of other people who have enabled IPFS in the Strix Music app and are online right now"
			Header="Users online"
			HeaderIcon="{ui:FontIcon Glyph=&#xE95A;}"
			IsEnabled="{x:Bind Ipfs.IsInitialized, FallbackValue=false, Mode=OneWay}">
			<TextBlock>
				<Run Text="{x:Bind Ipfs.Everyone.ConnectedPeers.Count, FallbackValue=?, Mode=OneWay}" />
			</TextBlock>
		</labs:SettingsCard>

		<!--
        <labs:SettingsCard
			Description="Requires app restart. See how many people are listening to the same track, album, artist, playlist, etc., as you. Allows others to see when something is playing, paused, loading, or failing to load."
			Header="Enable global playback state counters"
			HeaderIcon="{ui:FontIcon Glyph=&#xEBDA;}"
			IsEnabled="{x:Bind InvertBool(Ipfs.Settings.LoadCommand.IsRunning), FallbackValue=true, Mode=OneWay}"
			Visibility="{x:Bind Ipfs.IsInitialized, Mode=OneWay}">
            <ToggleSwitch IsEnabled="{x:Bind InvertBool(Ipfs.Settings.SaveCommand.IsRunning), FallbackValue=true, Mode=OneWay}" IsOn="{x:Bind Ipfs.Settings.GlobalPlaybackStateCountPluginEnabled, Mode=TwoWay}">
                <interactivity:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="Toggled">
                        <core:InvokeCommandAction Command="{x:Bind Ipfs.Settings.SaveCommand, Mode=OneWay}" CommandParameter="{x:Null}" />
                    </core:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>
            </ToggleSwitch>
        </labs:SettingsCard>
		-->

		<!--
        <labs:SettingsExpander
			Header="Allow communication with:"
			HeaderIcon="{ui:FontIcon Glyph=&#xEC27;}"
			IsEnabled="{x:Bind InvertBool(Ipfs.Settings.LoadCommand.IsRunning), FallbackValue=false, Mode=OneWay}">
			<labs:SettingsExpander.Items>
				<labs:SettingsCard ContentAlignment="Left">
					<RadioButton
						x:Name="LanOnlyRadioButton"
						Content="Devices on my local network"
						IsChecked="{x:Bind Ipfs.Settings.EmbeddedNodeLanOnly, FallbackValue=false, Mode=TwoWay}">
						<interactivity:Interaction.Behaviors>
							<core:DataTriggerBehavior
								Binding="{x:Bind LanOnlyRadioButton.IsChecked, Mode=OneWay}"
								ComparisonCondition="Equal"
								Value="True">
								<core:InvokeCommandAction Command="{x:Bind Ipfs.Settings.SaveCommand, Mode=OneWay}" CommandParameter="{x:Null}" />
							</core:DataTriggerBehavior>
							<core:DataTriggerBehavior
								Binding="{x:Bind LanOnlyRadioButton.IsChecked, Mode=OneWay}"
								ComparisonCondition="Equal"
								Value="True">
								<core:ChangePropertyAction
									PropertyName="EmbeddedNodeLanOnly"
									TargetObject="{x:Bind Ipfs.Settings, Mode=OneWay}"
									Value="True" />
							</core:DataTriggerBehavior>
						</interactivity:Interaction.Behaviors>
					</RadioButton>
				</labs:SettingsCard>

				<labs:SettingsCard ContentAlignment="Left">
					<RadioButton
						x:Name="LanAndWanRadioButton"
						Content="Devices on the internet and my local network"
						IsChecked="{x:Bind InvertBool(Ipfs.Settings.EmbeddedNodeLanOnly), BindBack=InvertBool, FallbackValue=false, Mode=TwoWay}">
						<interactivity:Interaction.Behaviors>
							<core:DataTriggerBehavior
								Binding="{x:Bind LanAndWanRadioButton.IsChecked, Mode=OneWay}"
								ComparisonCondition="Equal"
								Value="True">
								<core:InvokeCommandAction Command="{x:Bind Ipfs.Settings.SaveCommand, Mode=OneWay}" CommandParameter="{x:Null}" />
							</core:DataTriggerBehavior>
							<core:DataTriggerBehavior
								Binding="{x:Bind LanAndWanRadioButton.IsChecked, Mode=OneWay}"
								ComparisonCondition="Equal"
								Value="True">
								<core:ChangePropertyAction
									PropertyName="EmbeddedNodeLanOnly"
									TargetObject="{x:Bind Ipfs.Settings, Mode=OneWay}"
									Value="False" />
							</core:DataTriggerBehavior>
						</interactivity:Interaction.Behaviors>
					</RadioButton>
				</labs:SettingsCard>
			</labs:SettingsExpander.Items>
		</labs:SettingsExpander>
		-->

		<ProgressBar IsIndeterminate="True" Visibility="{x:Bind Ipfs.Settings.SaveCommand.IsRunning, Mode=OneWay}" />
	</StackPanel>
</UserControl>
